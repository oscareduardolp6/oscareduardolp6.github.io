<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on Oscar L√≥pez</title><link>https://oscarlp6.dev/tags/typescript/</link><description>Recent content in Typescript on Oscar L√≥pez</description><generator>Hugo</generator><language>es-MX</language><lastBuildDate>Wed, 18 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oscarlp6.dev/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>üèóÔ∏è M√©todos `Is`</title><link>https://oscarlp6.dev/blogs/is-methods/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/blogs/is-methods/</guid><description>√öltimamente he estado muy adentrado en la programaci√≥n funcional con lenguajes como Typescript y en mucha menos medida con Haskell y m√°s all√° de las part√≠cularidades de la programaci√≥n funcional como Monadas , me ha llamado la atenci√≥n conceptos relacionado con tipado, como los Union Types y las utilidades con la que viene.
Entre estas √∫tilidades he aprendido el concepto de hacer que los estados inv√°lidos sean irrepresentables, es decir evitar los m√©todos de la forma isX y en lugar de tener que estar verificando esas condiciones, saber, por el simple tipado, que tu estado es inv√°lido.</description></item><item><title>üïí Task vs Promise: Encadenaci√≥n</title><link>https://oscarlp6.dev/blogs/task-vs-promises/</link><pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/blogs/task-vs-promises/</guid><description>El primer lenguaje en el que aprend√≠ a trabajar de forma as√≠ncrona fue JavaScript. Al principio, me cost√≥ mucho trabajo porque era una forma de pensar completamente distinta a la que aprend√≠ en la universidad. Una vez que logr√© interiorizar los principios de la programaci√≥n as√≠ncrona, me fue mucho m√°s sencillo. Entonces, cuando comenc√© a trabajar en C#, de inmediato detect√© las similitudes entre las Task y las Promise, pues son pr√°cticamente equivalentes.</description></item><item><title>üõ†Ô∏è Branded Types</title><link>https://oscarlp6.dev/blogs/branded-types/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/blogs/branded-types/</guid><description>Como desarrollador, explorar y comprender los Branded Types en TypeScript ha sido una revelaci√≥n para m√≠. Antes de sumergirnos en este tema, perm√≠teme compartir una breve experiencia personal sobre c√≥mo he evolucionado en mi percepci√≥n del trabajo bajo presi√≥n, algo que en muchos sentidos refleja mi acercamiento a conceptos complejos como los Branded Types.
Recuerdo cuando enorgullecerme de trabajar bajo presi√≥n era casi un distintivo de honor en mi curr√≠culum. El cumplir con fechas l√≠mite ajustadas y enfrentar proyectos complejos parec√≠a un logro admirable.</description></item><item><title>El Dominio: Construyendo mi Organizador de archivos (Parte 2)</title><link>https://oscarlp6.dev/blogs/building-file-organizer-part-2/</link><pubDate>Thu, 30 Mar 2023 20:25:35 -0600</pubDate><guid>https://oscarlp6.dev/blogs/building-file-organizer-part-2/</guid><description>Lo primero en mi caso, fue plasmar en Notion las cosas que quer√≠a que tuviera mi software. Creo que es importante tener m√°s o menos definido lo que quieres hacer antes de comenzar con el c√≥digo, entre m√°s puedas adelantar de l√≥gica antes de comenzar a teclear mejor, aunque no siempre es posible eso.
En mi caso la l√≥gica es muy sencilla:
Tomando un directorio base, entrar recursivamente a trav√©s de sus subcarpetas y archivos, revisando cada archivo para verificar si cumple con los criterios de organizaci√≥n.</description></item></channel></rss>