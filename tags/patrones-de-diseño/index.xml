<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Patrones De Dise√±o on Oscar L√≥pez</title><link>https://oscarlp6.dev/tags/patrones-de-dise%C3%B1o/</link><description>Recent content in Patrones De Dise√±o on Oscar L√≥pez</description><generator>Hugo</generator><language>es</language><lastBuildDate>Wed, 18 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oscarlp6.dev/tags/patrones-de-dise%C3%B1o/index.xml" rel="self" type="application/rss+xml"/><item><title>üèóÔ∏è M√©todos `Is`</title><link>https://oscarlp6.dev/blogs/is-methods/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/blogs/is-methods/</guid><description>√öltimamente he estado muy adentrado en la programaci√≥n funcional con lenguajes como Typescript y en mucha menos medida con Haskell y m√°s all√° de las part√≠cularidades de la programaci√≥n funcional como Monadas , me ha llamado la atenci√≥n conceptos relacionado con tipado, como los Union Types y las utilidades con la que viene.
Entre estas √∫tilidades he aprendido el concepto de hacer que los estados inv√°lidos sean irrepresentables, es decir evitar los m√©todos de la forma isX y en lugar de tener que estar verificando esas condiciones, saber, por el simple tipado, que tu estado es inv√°lido.</description></item></channel></rss>