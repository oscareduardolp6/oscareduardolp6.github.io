<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arquitectura on Oscar L√≥pez</title><link>https://oscarlp6.dev/tags/arquitectura/</link><description>Recent content in Arquitectura on Oscar L√≥pez</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sat, 15 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oscarlp6.dev/tags/arquitectura/index.xml" rel="self" type="application/rss+xml"/><item><title>üß± Inmutabilidad</title><link>https://oscarlp6.dev/blogs/immutability/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/blogs/immutability/</guid><description>Recientemente en mi trabajo me toc√≥ enfrentarme a una base de c√≥digo que carec√≠a pr√°cticamente por completo de la inmutabilidad. Cada vez me he intentado acercar m√°s a los conceptos y pr√°cticas que vienen del mundo funcional, especialmente la inmutabilidad, por lo que al estar haciendo cambios en el c√≥digo ech√© mucho de menos esta caracter√≠stica, pues creo que tiene much√≠simas ventajas que abordaremos en este art√≠culo.
‚ùî ¬øQu√© es la inmutabilidad?</description></item><item><title>Como No Hacer servicios</title><link>https://oscarlp6.dev/blogs/como-no-hace-microservicios/</link><pubDate>Sat, 26 Nov 2022 16:35:49 -0600</pubDate><guid>https://oscarlp6.dev/blogs/como-no-hace-microservicios/</guid><description>En los √∫ltimos a√±os se ha puesto de moda el concepto de los microservicios, y con raz√≥n, esta es una arquitectura que permite desacoplar la √°reas de negocio, de forma que cada una pueda escalar y evolucionar independientemente, adem√°s de evitar que si un √°rea del sistema se cae, las caigan con ella.
Todo esto suena como una estructura idonea (y lo es), si bien ninguna estructura es perfecta, esta tiene grandes ventajas en escalabilidad y confiabilidad.</description></item></channel></rss>