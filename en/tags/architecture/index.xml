<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Oscar L√≥pez</title><link>https://oscarlp6.dev/en/tags/architecture/</link><description>Recent content in Architecture on Oscar L√≥pez</description><generator>Hugo -- gohugo.io</generator><language>es-mx</language><lastBuildDate>Sat, 15 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oscarlp6.dev/en/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>üß± Immutability</title><link>https://oscarlp6.dev/en/blogs/immutability/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/en/blogs/immutability/</guid><description>Recently at work, I had to deal with a codebase that lacked immutability almost entirely. I have been trying to get closer to concepts and practices from the functional programming world, especially immutability, so when making changes to the code, I missed this feature a lot. I believe it has many advantages, which we will address in this article.
‚ùî What is Immutability? Immutability refers to the property of an object whose state cannot be modified after its creation.</description></item></channel></rss>