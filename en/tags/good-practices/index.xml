<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Good Practices on Oscar L√≥pez</title><link>https://oscarlp6.dev/en/tags/good-practices/</link><description>Recent content in Good Practices on Oscar L√≥pez</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 13 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://oscarlp6.dev/en/tags/good-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>‚úçÔ∏è Code Comments</title><link>https://oscarlp6.dev/en/blogs/code-comments/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/en/blogs/code-comments/</guid><description>Recently, I came across this other article where the author talks about when it‚Äôs appropriate to use comments in code, and when it‚Äôs not. It&amp;rsquo;s a great article, and I recommend checking it out, even though I don‚Äôt fully agree with some of the points made.
In this article, I‚Äôll try to give my take on using comments, when to use them, when not to, alternatives, and the reasoning behind each decision.</description></item><item><title>üß± Immutability</title><link>https://oscarlp6.dev/en/blogs/immutability/</link><pubDate>Sat, 15 Jun 2024 00:00:00 +0000</pubDate><guid>https://oscarlp6.dev/en/blogs/immutability/</guid><description>Recently at work, I had to deal with a codebase that lacked immutability almost entirely. I have been trying to get closer to concepts and practices from the functional programming world, especially immutability, so when making changes to the code, I missed this feature a lot. I believe it has many advantages, which we will address in this article.
‚ùî What is Immutability? Immutability refers to the property of an object whose state cannot be modified after its creation.</description></item></channel></rss>